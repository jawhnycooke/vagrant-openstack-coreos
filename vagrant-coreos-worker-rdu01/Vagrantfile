require 'vagrant-openstack-provider'

Vagrant.configure('2') do |config|

  config.ssh.username = ENV['OS_SSH_USERNAME']
  config.vm.provider :openstack do |os|
    os.username           = ENV['OS_USERNAME']
    os.password           = ENV['OS_PASSWORD']
    os.flavor             = "GP-Large"
    os.image              = "CoreOS"
    os.openstack_auth_url = "https://us-rdu-1.cisco.com:5000/v2.0/tokens"
    os.openstack_network_url = "https://us-rdu-1.cisco.com:9696/v2.0"
    os.openstack_image_url = "https://us-rdu-1.cisco.com:9292/v2.0"
    os.openstack_volume_url = "https://us-rdu-1.cisco.com:8776/v1/e7e394f0992d47c7ab8342842f573d5c"
    os.tenant_name        = ENV['OS_TENANT_NAME']
    os.sync_method        = 'none'
    os.networks           = "fb33532b-3f26-4d77-8f0b-f2b89c851e87"

    #This ssh_disabled will keep vagrant not trying to ssh into machine after boot.
    os.ssh_disabled = "true"
    os.keypair_name = "messenger-infra"


  end

  (1..20).each do |i|
    config.vm.define "instance_#{i}" do |instance|
      instance.vm.provider :openstack do |os|
        os.server_name      = "worker-#{i}"
        #os.floating_ip_pool = ENV['OS_FLOATING_IP_POOL']
        os.user_data = "#cloud-config
hostname: core-worker#{i}.webex-ng.com
write_files:
  - path: /etc/resolv.conf
    content: |
      nameserver 127.0.0.1
      nameserver 8.8.8.8
      nameserver 8.8.4.4
  - path: /etc/systemd/system/docker.service.d/50-insecure-registry.conf
    content: |
      [Service]
      Environment=DOCKER_OPTS="'--registry-mirror=http://192.168.0.10:5000'"
coreos:
  update:
    reboot-strategy: etcd-lock
  fleet:
    metadata: region=us-rdu-1,role=worker
    etcd_servers: 'http://192.168.0.10:4001,http://192.168.0.11:4001,http://192.168.0.12:4001'
  locksmith:
    endpoint: 'http://192.168.0.10:4001,http://192.168.0.11:4001,http://192.168.0.12:4001'
  units:
    - name: etcd.service
      mask: true
    - name: fleet.service
      command: start
write_files:
  - path: /etc/profile.d/etcdctl.sh
    permissions: 0644
    owner: core
    content: |
      # configure etcdctl to work with our etcd servers set above
      export ETCDCTL_PEERS='http://192.168.0.10:4001,http://192.168.0.11:4001,http://192.168.0.12:4001'
  - path: /etc/profile.d/fleetctl.sh
    permissions: 0644
    owner: core
    content: |
      # configure fleetctl to work with our etcd servers set above
      export FLEETCTL_ENDPOINT=unix:///var/run/fleet.sock
      export FLEETCTL_EXPERIMENTAL_API=true"
      end
    end
  end
end
